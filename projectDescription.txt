Description:
-----------
Identify calender events with date, time and location(if present) from text.Events extracted must be a future event with details of the event.

Proposed Solution and Implementation Details:
--------------------------------------------
   a. Lexical features
        • Tokenizer
        • Spell correction
   b. Syntactic Features
        • POS - Temporal expression tagging (sequence, duration and range) & POS tagging
        • Syntactic pattern - Look for past tense tag (eg., VBD, VBN, etc.,) and ignore them as they are past events
   c. Semantic Features
        • Synonymy – from NLTK WordNet – to retrieve words that are synonymous to required events (Marriage, Birthday, Meeting, Anniversary, Seminar)
        • Named Entity recognition to find location of the event
Examples
    a) Lexical Features – The lecture starts at 11.00 A.M in Auditoruim
        output: [‘The’, ‘lecture’, ‘starts’, ‘at’ , ‘11.00', ‘A.M’, ‘in’, ‘Auditorium’]
        
    b) Syntactic Features -The lecture starts at 11.00 A.M in Auditorium
        output: [('The', 'DT'), ('lecture', 'NN'), ('starts', 'VBZ'), ('at', 'IN'), ('11.00', 'CD'), ('A.M', 'NNP'), ('in', 'IN'),
        ('Auditorium', 'NNP')][with POS tag temporal tagging is done for date and time]
        
    c) Semantic Features- The lecture starts at 11.00 A.M in Auditorium
        output: The Seminar starts at 11.00 A.M in Auditorium
       
Modules and Tools:
-----------------
	- Pattern matching using regex 
		• eg: starts at .* \d+:\d+(am|pm)
	- Tokenization
	- Spell correction
		• Explore spell correction in nltk
	- POS Tagger
		• temporal tagging and pos
	- Syntactic pattern(remove events in past tense)
	- Synonymy for 5 events
	- Named entity recognition
	- Result stored in MongoDB
		• Result Accessed through API calls
    
Workflow:
--------
	- Perform tokenization, syntactic and then semantic.
	- List the event iff a date/time is present and is one of the above 5 events.
	- If present(Optional): location(NER)

O/P Format:
-----------
Event Format: Output is stored in the database in the following format.
    - PatientID
    - Response:
    	- EVENT_TYPE where EVENT_TYPE is of Marriage, Birthday party, Meeting, Anniversary, Seminar
    	- When(relative date of event)
    	- Date(absolute date of an event)
    	- Location(if present)
	- Actual Text

O/P Access:
-----------
Output can be accesses through the API calls.
	- Flask is used to handle the requests and show the results
	- {localhost}/allPatients:It will retrieve all responses for all the patients
	- {localhost}/patientResponse/PatientID:It will retrieve all responses for the particular patient
	
Files and Folder Description:
-----------------
    - README and projectDesciption files describes about the project and algorithm
    - Learning and exploring is a doc file which records the summary of overall things explored and learned (challanges and difficulties faced) 
    - src folder contains all the code and related things
    - sampleInput.csv is the input file
    	• Import this csv file on the database with name "sampleInput"
        • Input is taken from online source and also made up sentences.
    - EventDetector.log is a log file which records all the logs in program(if any)
    
Note:
-----
    - Identify event for each line (not multiple lines at once).
    - The model will itself evaluate the precision, recall, accuracy, f1-score


#############################################################################
